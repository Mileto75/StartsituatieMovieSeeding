// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wba.Oefening.RateAMovie.Web.Data;

namespace Wba.Oefening.RateAMovie.Web.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20200423133220_AddSeeding")]
    partial class AddSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Web.Domain.Entities.Actor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new { Id = 1L, FirstName = "Keanu", LastName = "Reeves" },
                        new { Id = 2L, FirstName = "Laurence", LastName = "Fishburne" },
                        new { Id = 3L, FirstName = "Carrie-Anne", LastName = "Moss" },
                        new { Id = 4L, FirstName = "Sean", LastName = "Bean" }
                    );
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Web.Domain.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new { Id = 1L, Name = "The Wachowski Brothers" },
                        new { Id = 20L, Name = "Newline Cinema" }
                    );
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Web.Domain.Entities.Director", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new { Id = 1L, FirstName = "Lana", LastName = "Wachowski" },
                        new { Id = 2L, FirstName = "Lilly", LastName = "Wachowski" },
                        new { Id = 3L, FirstName = "Peter", LastName = "Jackson" }
                    );
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Web.Domain.Entities.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CompanyId");

                    b.Property<DateTime?>("ReleaseDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Movies");

                    b.HasData(
                        new { Id = 1L, CompanyId = 1L, ReleaseDate = new DateTime(1999, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "The Matrix" },
                        new { Id = 2L, CompanyId = 20L, ReleaseDate = new DateTime(2001, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "The Fellowship of the Ring" }
                    );
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Web.Domain.Entities.MovieActor", b =>
                {
                    b.Property<long>("MovieId");

                    b.Property<long>("ActorId");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActor");

                    b.HasData(
                        new { MovieId = 1L, ActorId = 1L },
                        new { MovieId = 1L, ActorId = 2L },
                        new { MovieId = 1L, ActorId = 3L },
                        new { MovieId = 2L, ActorId = 4L }
                    );
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Web.Domain.Entities.MovieDirector", b =>
                {
                    b.Property<long>("MovieId");

                    b.Property<long>("DirectorId");

                    b.HasKey("MovieId", "DirectorId");

                    b.HasIndex("DirectorId");

                    b.ToTable("MovieDirector");

                    b.HasData(
                        new { MovieId = 1L, DirectorId = 1L },
                        new { MovieId = 1L, DirectorId = 2L },
                        new { MovieId = 2L, DirectorId = 3L }
                    );
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Web.Domain.Entities.Rating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RatedMovieId");

                    b.Property<string>("Review");

                    b.Property<long>("ReviewerId");

                    b.Property<byte>("Score");

                    b.HasKey("Id");

                    b.HasIndex("RatedMovieId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new { Id = 100L, RatedMovieId = 1L, Review = "I think this movie is ok!", ReviewerId = 1L, Score = (byte)3 },
                        new { Id = 101L, RatedMovieId = 2L, Review = "I think this movie is really nice!", ReviewerId = 1L, Score = (byte)4 },
                        new { Id = 102L, RatedMovieId = 1L, ReviewerId = 2L, Score = (byte)4 }
                    );
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Web.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1L, FirstName = "Siegfried", LastName = "Derdeyn", Username = "siegfried.derdeyn" },
                        new { Id = 2L, FirstName = "Joachim", LastName = "François", Username = "joachim.francois" }
                    );
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Web.Domain.Entities.Movie", b =>
                {
                    b.HasOne("Wba.Oefening.RateAMovie.Web.Domain.Entities.Company", "Company")
                        .WithMany("Movies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Web.Domain.Entities.MovieActor", b =>
                {
                    b.HasOne("Wba.Oefening.RateAMovie.Web.Domain.Entities.Actor", "Actor")
                        .WithMany("MovieAppearances")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Wba.Oefening.RateAMovie.Web.Domain.Entities.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Web.Domain.Entities.MovieDirector", b =>
                {
                    b.HasOne("Wba.Oefening.RateAMovie.Web.Domain.Entities.Director", "Director")
                        .WithMany("DirectedMovies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Wba.Oefening.RateAMovie.Web.Domain.Entities.Movie", "Movie")
                        .WithMany("Directors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wba.Oefening.RateAMovie.Web.Domain.Entities.Rating", b =>
                {
                    b.HasOne("Wba.Oefening.RateAMovie.Web.Domain.Entities.Movie", "RatedMovie")
                        .WithMany("Ratings")
                        .HasForeignKey("RatedMovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Wba.Oefening.RateAMovie.Web.Domain.Entities.User", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
